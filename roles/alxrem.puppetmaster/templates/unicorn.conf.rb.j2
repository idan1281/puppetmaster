worker_processes {{ unicorn_worker_processes }}
run_dir = '{{ run_dir }}'

Dir.mkdir(run_dir) unless Dir.exists?(run_dir)
File.chmod(0750, run_dir)
FileUtils.chown('puppet', 'www-data', run_dir)

working_directory '{{ lib_dir }}'
listen '{{ unicorn_socket }}', :backlog => 64
timeout {{ unicorn_timeout }}
pid '{{ unicorn_pidfile }}'

stderr_path '{{ log_dir }}/unicorn.stderr.log'
stdout_path '{{ log_dir }}/unicorn.stdout.log'

GC.respond_to?(:copy_on_write_friendly=) and
  GC.copy_on_write_friendly = true

before_fork do |server, worker|
  # This allows a new master process to incrementally
  # phase out the old master process with SIGTTOU to avoid a
  # thundering herd (especially in the "preload_app false" case)
  # when doing a transparent upgrade.  The last worker spawned
  # will then kill off the old master process with a SIGQUIT.
  old_pid = "#{server.config[:pid]}.oldbin"
  if old_pid != server.pid
    begin
      sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
      Process.kill(sig, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
    end
  end

  # Throttle the master from forking too quickly by sleeping.  Due
  # to the implementation of standard Unix signal handlers, this
  # helps (but does not completely) prevent identical, repeated signals
  # from being lost when the receiving process is busy.
  sleep 1
end
